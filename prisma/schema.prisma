// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator prismaClassGenerator {
  provider = "prisma-class-generator"
  output   = "../src/_gen/prisma-class"
  dryRun   = false
}

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Blog {
  id        Int        @id() @default(autoincrement())
  title     String
  content   String?    @db.Text
  category  String
  createdAt DateTime   @default(now())
  updatedAt DateTime   @default(now()) @updatedAt
  comments  Comments[]
  User      User?      @relation(fields: [userId], references: [id])
  userId    Int?
  imagePath String?
}

model Comments {
  id        Int      @id @default(autoincrement())
  postId    Int
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
  blog      Blog?    @relation(fields: [blogId], references: [id])
  blogId    Int?
  User      User?    @relation(fields: [userId], references: [id])
  userId    Int?
}

model User {
  id              Int        @id @default(autoincrement())
  firstName       String
  lastName        String
  email           String     @unique
  mobileNumber    String     @unique
  password        String
  emailVerifiedAt DateTime?
  createdAt       DateTime   @default(now())
  updatedAt       DateTime   @default(now()) @updatedAt
  comments        Comments[]
  blogs           Blog[]
  roleId          Int?
  role            Role?      @relation(fields: [roleId], references: [id])
}

model Role {
  id                 Int                  @id @default(autoincrement())
  name               String
  RolesOnPermissions RolesOnPermissions[]
  User               User[]
}

model Permissions {
  id                 Int                  @id @default(autoincrement())
  name               String
  RolesOnPermissions RolesOnPermissions[]
}

model RolesOnPermissions {
  roleId        Int
  role          Role        @relation(fields: [roleId], references: [id])
  permissionsId Int
  permissions   Permissions @relation(fields: [permissionsId], references: [id])

  @@id([roleId, permissionsId])
}
